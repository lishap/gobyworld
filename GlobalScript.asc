// main global script file

// set default game options

function set_default_options()
{
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  sldSpeed.Value = 40;
  SetGameSpeed(40);

  if (IsSpeechVoxAvailable())
  {
     Speech.VoiceMode = eSpeechVoiceAndText;
     btnVoice.Text = "Voice and Text";
     sldVoice.Value = 255;
     SetSpeechVolume(255);
  }

  if (System.SupportsGammaControl)
  {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }
  
  cGoby.SpeechColor = 64536;
}

// initialize gPanel
function initialize_control_panel()
{
  if (!IsSpeechVoxAvailable())
  {
    // hide the speech controls, if speech is not available
    lblVoice.Visible = false;
    btnVoice.Visible = false;
    sldVoice.Visible = false;
  }

  if (!System.SupportsGammaControl) {
    // hide the gamma control, if not supported
    sldGamma.Visible = false;
    lblGamma.Visible = false;
  }

  set_default_options();
}

// hide the icon bar and show a GUI
function open_gui(GUI* gui_to_open)
{

  gIconbar.Visible = false;
  mouse.UseModeGraphic(eModePointer);
  gui_to_open.Visible = true;
}

// hide the GUI and show the icon bar
function close_gui(GUI* gui_to_close)
{
  gui_to_close.Visible = false;
  mouse.UseDefaultGraphic();
  lblOverHotspot.Visible = true;
  gIconbar.Visible = true;
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  
  
}

// main global script file
#define WORD_LENGTH 5
#define MAX_GUESSES 4
 
// This represents a row in the Wordle grid (one guess)
struct WordleGuess
{
   Button* LetterField[WORD_LENGTH];
   import String ToString();  
};
 
String WordleGuess::ToString()
{
  return String.Format("%s%s%s%s%s", this.LetterField[0].Text, this.LetterField[1].Text, this.LetterField[2].Text, this.LetterField[3].Text, this.LetterField[4].Text); 
}

enum WordleFieldState
{
  eWordleFieldBlank = 0,      // Nothing entered
  eWordleFieldEntry,          // Filled field in current row during editing
  eWordleFieldInvalid,        // Feedback that the word is invalid
  eWordleFieldGray,           // A gray field in a submitted row (letter not in word)
  eWordleFieldYellow,         // A yellow field in a submitted row (letter in word in other position)
  eWordleFieldGreen           // A green field in a submitted row (letter in word in same position)
};

// This is our wordle grid: a set of Wordle rows
WordleGuess WordleGrid[MAX_GUESSES];
 
int currentGuess;
int currentInputLetter;

// This function just links up the buttons of the GUI with our Wordle grid
void SetupWordle()
{
  int control;
  for(int i=0; i<MAX_GUESSES; i++)
  {
    for(int j=0; j<WORD_LENGTH; j++)
    {
      WordleGrid[i].LetterField[j] = gWordle.Controls[control].AsButton;
      control++;
    }
  }
}

       bool checkValid(String guess)
      {
        // TODO: Just a placeholder. Need to add check against dictionary of valid guesses
        return true;
       }
 
      WordleFieldState[] checkGuess(String guess, String correctSolution)
      {
        if(guess.Length != WORD_LENGTH || correctSolution.Length != WORD_LENGTH)
        {
          AbortGame("Invalid Wordle data");
        }
        
        WordleFieldState format[];
        format = new WordleFieldState[WORD_LENGTH];
        int xCount = 0;
        int yCount = 0;
        int zCount = 0;
        
        for(int i=0; i<WORD_LENGTH; i++){
          if (guess.Chars[i] == 'X' || guess.Chars[i] == 'x'){
            xCount++;}
          else if (guess.Chars[i] == 'Y' || guess.Chars[i] == 'y'){
            yCount++;} 
          else if (guess.Chars[i] == 'Z' || guess.Chars[i] == 'z'){
            zCount++;}
            
         if(guess.Chars[i] == correctSolution.Chars[i]){
            format[i] = eWordleFieldGreen;
          }
        else if(correctSolution.IndexOf(String.Format("%c",guess.Chars[i])) != -1 && (xCount < 1 || yCount < 2 || zCount < 2)){
          format[i] = eWordleFieldYellow;}
        else{
          format[i] = eWordleFieldGray;
        }
        return format;
      }
     }
      
        
// called when the game starts, before the first room is loaded
function game_start()
{
  // initialize gPanel controls
  initialize_control_panel();

  // set KeyboardMovement movement mode
  KeyboardMovement.Mode = eKeyboardMovementModeTapping;

  // set KeyboardMovement keys
  //KeyboardMovement.KeyUp = eKeyW;
  //KeyboardMovement.KeyDown = eKeyS;
  //KeyboardMovement.KeyLeft = eKeyA;
  //KeyboardMovement.KeyRight = eKeyD;
  
  SetupWordle();
  Mouse.Mode = eModeInteract;  
}

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
  if (cMallory.Room == 3||cMallory.Room == 4||cMallory.Room == 5){
    //cMallory.Visible = false;
  }
  else{
  cMallory.FollowCharacter(cGoby);
  }
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{ 

}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
}


// called when a key is pressed
function on_key_press(eKeyCode keycode){
  
  if (IsGamePaused() || !IsInterfaceEnabled())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyCtrlQ)
  {
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF9)
  {
    // F9 will prompt to restart the game
    open_gui(gRestart);
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyCtrlS)
  {
    // Ctrl-S will give the player all defined inventory items
    Debug(0, 0);
  }
  else if (keycode == eKeyCtrlV)
  {
    // Ctrl-V will show game engine version and build date
    Debug(1, 0);
  }
  else if (keycode == eKeyCtrlA)
  {
    // Ctrl-A will show walkable areas
    Debug(2, 0);
  }
  else if (keycode == eKeyCtrlX)
  {
    // Ctrl-X will let the player teleport to any room
    Debug(3, 0);
  }
  else if (keycode == eKeyReturn)
  {
    if (gRestart.Visible)
    {
      // Enter confirms a restart
      RestartGame();
    }
  }

  
  if(gWordle.Visible)
  {
    int j=0;
    if(keycode >= eKeyA && keycode <= eKeyZ) // Typed a letter
    {
      if(currentInputLetter<WORD_LENGTH)
      {
        WordleGrid[currentGuess].LetterField[currentInputLetter].Text = String.Format("%c", keycode);
        currentInputLetter++;
      }
    }
    else if(keycode == eKeyBackspace) // Remove the last letter
    {
      if(currentInputLetter>0)
      {
        currentInputLetter--;
        WordleGrid[currentGuess].LetterField[currentInputLetter].Text = "";        
      }
    }
   else if(keycode == eKeyReturn)
    {
      if(currentInputLetter == WORD_LENGTH) 
      {
        String solution = "XYZZY";
        String guess = WordleGrid[currentGuess].ToString();
        if(checkValid(guess))
        {
          // Update state
          WordleFieldState formatRow[] = checkGuess(guess, solution);
          for(int i=0; i<WORD_LENGTH; i++)
          {
            switch(formatRow[i])
            {
              case eWordleFieldGreen:
                WordleGrid[currentGuess].LetterField[i].TextColor = Game.GetColorFromRGB(0, 128, 0);
                break;
              case eWordleFieldYellow:
                WordleGrid[currentGuess].LetterField[i].TextColor = Game.GetColorFromRGB(128, 128, 0);
                break;
              case eWordleFieldGray:
              default:
                WordleGrid[currentGuess].LetterField[i].TextColor = Game.GetColorFromRGB(64, 64, 64);
                break;
            }
          }
          
          if(guess.UpperCase() == solution.UpperCase())
        {
          WordleSolved = true;
          Wait(80);
          gWordle.Visible = false;
          cClown.Say("Ahhhh! XYZZY. I should have known. Well, see you Goby. Good luck out there! I've gifted you my goggles and flippers. Keep them, no use for a coin like me. Go left, brother.");
        }
          currentGuess++;
          currentInputLetter=0;
          
          if(currentGuess >= MAX_GUESSES)
          {
            // TODO: Lose!
          }
        }
      }
    }
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  // called when a mouse button is clicked. button is either LEFT or RIGHT
  if (IsGamePaused())
  {
    // game is paused, so do nothing (i.e. don't process mouse clicks)
  }
  else if (button == eMouseLeft)
  {
    // left-click, so try using the current mouse cursor mode at this position
    Room.ProcessClick(mouse.x, mouse.y, mouse.Mode );
  }
  else if (button == eMouseRight)
  {
    // middle-click makes the character walk to clicked area, regardless of cursor mode
    Room.ProcessClick(mouse.x, mouse.y, eModeWalkto);
  }
}


function btnInvSelect_Click(GUIControl *control, MouseButton button)
{
  // switch to the interact cursor
  mouse.Mode = eModeInteract;
  // ...but override the appearance to look like the arrow
  mouse.UseModeGraphic(eModePointer);
}


function btnIconCurInv_Click(GUIControl *control, MouseButton button)
{
  if (player.ActiveInventory != null)
  {
    mouse.Mode = eModeUseinv;
  }
}

function btnIconExit_Click(GUIControl *control, MouseButton button)
{
  open_gui(gExitGame);
}

function btnIconAbout_Click(GUIControl *control, MouseButton button)
{
  open_gui(gPanel);
}


//START OF CONTROL PANEL FUNCTIONS

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  Display("%s[AGS %s", Game.Name, System.Version);
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gExitGame);
}

function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function sldVoice_OnChange(GUIControl *control)
{
  SetSpeechVolume(sldVoice.Value);
}

function btnVoice_OnClick(GUIControl *control, MouseButton button)
{
  if (btnVoice.Text == "Voice and Text")
  {
    Speech.VoiceMode = eSpeechVoiceOnly;
    btnVoice.Text = "Voice only";
  }
  else if (btnVoice.Text == "Voice only")
  {
    Speech.VoiceMode = eSpeechTextOnly;
    btnVoice.Text = "Text only";
  }
  else if (btnVoice.Text == "Text only")
  {
    Speech.VoiceMode = eSpeechVoiceAndText;
    btnVoice.Text = "Voice and Text";
  }
}

function sldGamma_OnChange(GUIControl *control)
{
  System.Gamma = sldGamma.Value;
}

function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  set_default_options();
}
//END OF CONTROL PANEL FUNCTIONS

function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gRestart);
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}



function btnConfirmedQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}


function cClown_AnyClick()
{
 dClownCoin.Start();
}



function cLaLaine_AnyClick()
{
  if (cLaLaine.Loop == 0){
cLaLaine.SayBackground("Help me! My torso, legs and arms have been washed away by the bile river.");
}
}

function cMallory_AnyClick()
{
cMallory.SayBackground("*pant*");
}

function cLaLaine_UseInv()
{
  if (cGoby.ActiveInventory ==iLaLaineTorso){
    cLaLaine.y = 228-15;
    cLaLaine.Loop = 1;
    player.LoseInventory(iLaLaineTorso);
  }
  
  if (cGoby.ActiveInventory ==iLaLaineArms){
    if (cLaLaine.Loop ==1){
      cLaLaine.Loop = 2;
      player.LoseInventory(iLaLaineArms);
      }
    else{
      cLaLaine.SayBackground("I need my torso first!");
      }
  }
  
  if(cGoby.ActiveInventory == iLaLaineLegs){
    if (cLaLaine.Loop ==2){
      cLaLaine.y = 228-30;
      cLaLaine.Loop =3;
      player.LoseInventory(iLaLaineLegs);
      dLaLaine.Start();
      }
    else{
      cLaLaine.SayBackground("I need my torso and arms first!");
      }
  }
}

bool merchant_climbUp;

function room_load(){
  merchant_climbUp = false;
  }

function cMerchant_AnyClick()
{
 if (merchant_climbUp == false && cGoby.InventoryQuantity[iSnowglobes.ID] == 0)
   {
    cMerchant.Animate(1, 3, 0, eBlock);
    cMerchant.LockViewFrame(5,2,0); 
    merchant_climbUp = true;
    dMerchant.Start();
  }
}


